---
title: "Adenomyosis spatial transcriptomics"
subtitle: "Ligand-receptor binding"
author: "Emily Johnson"
date: today
date-format: short
format:
  html:
    self-contained: true
    theme: litera
    toc: true
editor: source
code-block-bg: true
code-block-border-left: "#31BAE9"
---
# Ligand-receptor binding

## Load libraries

```{r}
#| output: false
#| warning: false
#| message: false


library(nichenetr)
library(tidyverse)
library(RColorBrewer)
library(cowplot)
library(ggpubr)
library(circlize)
library(patchwork)
source("src/utilityFunctions.R")

set.seed(123)

```


## Read in data

```{r}
#| output: false

# Raw data and pheno
target_spatial_data_geoDiff  <- readRDS("results/GeoDiff_normalised_spatial_data.RDS")
pheno <- pData(target_spatial_data_geoDiff)
mat <- target_spatial_data_geoDiff @assayData$normmat

# DE results
limma_GeoDiff_results <- readRDS("results/differential_expression/limma_GeoDiff_pairwise_comparisons.RDS")

```


## Define the differentially genes in adenomyosis vs eutopic endometrium

```{r}

PanCK_Adenomyosis <- unique(limma_GeoDiff_results[["PanCK_Adenomyosis-PanCK_Functionalis"]] %>%
  mutate("gene" = row.names(.)) %>% 
  filter(adj.P.Val<=0.05 & abs(logFC)>=log2(1.5)) %>% pull(gene), 
  limma_GeoDiff_results[["PanCK_Adenomyosis-PanCK_Basalis"]] %>%
  mutate("gene" = row.names(.)) %>% 
  filter(adj.P.Val<=0.05 & abs(logFC)>=log2(1.5)) %>% pull(gene))


CD45_Adenomyosis <- unique(limma_GeoDiff_results[["CD45_Adenomyosis-CD45_Functionalis"]] %>%
  mutate("gene" = row.names(.)) %>% 
  filter(adj.P.Val<=0.05 & abs(logFC)>=log2(1.5)) %>% pull(gene), 
  limma_GeoDiff_results[["CD45_Adenomyosis-CD45_Basalis"]] %>%
  mutate("gene" = row.names(.)) %>% 
  filter(adj.P.Val<=0.05 & abs(logFC)>=log2(1.5)) %>% pull(gene))


CD31_Adenomyosis <- unique(limma_GeoDiff_results[["CD31_Adenomyosis-CD31_Functionalis"]] %>%
  mutate("gene" = row.names(.)) %>% 
  filter(adj.P.Val<=0.05 & abs(logFC)>=log2(1.5)) %>% pull(gene), 
  limma_GeoDiff_results[["CD31_Adenomyosis-CD31_Basalis"]] %>%
  mutate("gene" = row.names(.)) %>% 
  filter(adj.P.Val<=0.05 & abs(logFC)>=log2(1.5)) %>% pull(gene))


Stroma_Adenomyosis <- unique(limma_GeoDiff_results[["Stroma_Adenomyosis-Stroma_Functionalis"]] %>%
  mutate("gene" = row.names(.)) %>% 
  filter(adj.P.Val<=0.05 & abs(logFC)>=log2(1.5)) %>% pull(gene), 
  limma_GeoDiff_results[["Stroma_Adenomyosis-Stroma_Basalis"]] %>%
  mutate("gene" = row.names(.)) %>% 
  filter(adj.P.Val<=0.05 & abs(logFC)>=log2(1.5)) %>% pull(gene))


GOI_list <- list(PanCK_Adenomyosis = PanCK_Adenomyosis, CD45_Adenomyosis = CD45_Adenomyosis, CD31_Adenomyosis = CD31_Adenomyosis, Stroma_Adenomyosis = Stroma_Adenomyosis)

```


## Create a table of the cell communication combinations

```{r}

pData(target_spatial_data_geoDiff) <- pData(target_spatial_data_geoDiff) %>% mutate(segment=replace(segment, grepl(pattern = "Myometrium", x = region), "Myo")) %>% mutate(Annotation = paste0(.$segment, "_", .$region))

```

```{r}

cell_combinations_adenomyosis <- pData(target_spatial_data_geoDiff) %>%
  tidyr::expand(Annotation, Annotation) %>%
  filter(grepl('Adenomyosis|Myo_Myometrium_near_adeno', Annotation...1) &
           grepl('Adenomyosis', Annotation...2)) %>% filter(Annotation...1!=Annotation...2) %>%
  dplyr::rename(sender = Annotation...1, receiver = Annotation...2) %>% mutate(geneset = receiver, name = paste0(gsub('_.*','',sender), "_", gsub('_.*','',receiver)))

#cell_combinations_adenomyosis <- cell_combinations_adenomyosis[[-4,]]
cell_combinations_adenomyosis <- cell_combinations_adenomyosis[!grepl("CD31", cell_combinations_adenomyosis$receiver),]


#cell_combinations_adenomyosis[c(10:12), 4] <- c("Myo_CD45", "Myo_PanCK", "Myo_Stroma")

```


```{r}
#| eval: false

#timeout(10000)
options(timeout=1000000)


niche_net_res <- list()

for (i in 1:nrow(cell_combinations_adenomyosis)) {
  sender = as.character(cell_combinations_adenomyosis[i, 1])
  receiver = as.character(cell_combinations_adenomyosis[i, 2])
  geneset = as.character(cell_combinations_adenomyosis[i, 3])
  
  expressed_genes_sender = target_spatial_data_geoDiff[ ,pData(target_spatial_data_geoDiff)$Annotation==sender] %>%
  assayDataElement(elt = "exprs") %>% which(x = rowMeans(.)>4) %>% names()
  
  expressed_genes_receiver = target_spatial_data_geoDiff[ ,pData(target_spatial_data_geoDiff)$Annotation==receiver] %>%
  assayDataElement(elt = "exprs") %>% which(x = rowMeans(.)>4) %>% names()
  
  DE_geneset <- GOI_list[[geneset]]
  
  niche_net_res[[i]] <- runNicheNetAnalysis(expressed_genes_sender, expressed_genes_receiver,DE_geneset, senderName = paste0("Prioritised ", gsub('_.*','',sender), " ligands"), receiverName = paste0("Adenomyosis ", gsub('_.*','',receiver)))
  
}


names(niche_net_res) <- cell_combinations_adenomyosis$name
write_rds(niche_net_res, "results/nichenetR_res_adenomyosis_myo2.rds")

```

```{r}

# Read in results saved to RDS object
niche_net_res <- readRDS("results/nichenetR_res_adenomyosis_myo2.rds")

```

```{r}

# Save results tables to excel files
niche_net_res %>% map(function(x) x[[2]]) %>% map(~arrange(.x,desc(weight))) %>% writexl::write_xlsx(path = "results/ligand_receptor/ligand_target_links_table_myo.xlsx", col_names = TRUE)


niche_net_res %>% map(function(x) x[[3]]) %>% map(~arrange(.x,desc(aupr))) %>% writexl::write_xlsx(path = "results/ligand_receptor/ligand_activity_table_myo.xlsx", col_names = TRUE)

```

```{r}

# Create DF containing collapsed sender-receiver data for circos plot 
#niche_net_res_format <- lapply(niche_net_res, function(x) x[[2]])
circos_links_oi <- niche_net_res %>% map(function(x) x[[2]]) %>%
  do.call(rbind, .) %>% 
  mutate("annotation" = gsub("\\..*", "", row.names(.)), "id" = row.names(.)) %>%
  mutate("sender" = sub("_.*", "", .$annotation),
         "receiver" = sub(".*_", "", .$annotation)) %>%
  filter(weight > quantile(weight, 0.95)) 

```

```{r}

senders_receivers = union(circos_links_oi$sender %>% unique(), circos_links_oi$receiver %>% unique()) %>% sort()

colors_sender = c("#fcb02b", "#0F5A94", "#60a8a5", "#BEC100", "#b52658") %>% magrittr::set_names(senders_receivers)
colors_receiver = c("#fcb02b", "#0F5A94", "#60a8a5", "#BEC100", "#b52658") %>% magrittr::set_names(senders_receivers)


```

```{r}

circos <- produceCircosPlot(circos_links_oi, colors_sender, colors_receiver, title="")

```

```{r}

pdf(file = "figures/ligand_receptor/circos_plot_.95_quantile_myo.pdf", width = 8, height = 7)
circos$circos
circos$legend
dev.off()


```


```{r}

niche_net_figures <- niche_net_res %>% map(nicheNetPlot)
niche_net_figures_wide <- niche_net_res %>% map(nicheNetPlot, orientation="wide")

map(names(niche_net_figures), function(.x) {
  
  save_plot(filename = paste0("figures/ligand_receptor/all/", .x, ".pdf"),
            plot = niche_net_figures[[.x]],
            base_height = 11,
            base_width = 11,
            bg="white")
    })


map(names(niche_net_figures_wide), function(.x) {
  
  save_plot(filename = paste0("figures/ligand_receptor/all_wide/", .x, "_wide.pdf"),
            plot = niche_net_figures_wide[[.x]],
            base_height = 9,
            base_width = 19,
            bg="white")
    })

```


```{r}
# Figure 6
# Immune epithelial
CD45_PanCK_aupr <- niche_net_res[["CD45_PanCK"]][["ligandPearson"]] + scale_fill_gradientn(colours = c("#D6DAE1", "firebrick3"))

CD45_PanCK_target <- niche_net_res[["CD45_PanCK"]][["ligandTarget"]] + 
  scale_fill_gradientn(colours = c("#e1e3e6", "#BEC100"))

save_plot(filename = "figures/ligand_receptor/fig6/CD45_PanCK_aupr.pdf", 
          plot = CD45_PanCK_aupr, base_height = 3,base_width = 2, bg="white")
save_plot(filename = "figures/ligand_receptor/fig6/CD45_PanCK_target.pdf", 
          plot = CD45_PanCK_target, base_height = 3.4,base_width = 5, bg="white")


# Endothelial epithelial
CD31_PanCK_aupr <- niche_net_res[["CD31_PanCK"]][["ligandPearson"]] + scale_fill_gradientn(colours = c("#D6DAE1", "firebrick3"))

CD31_PanCK_target <- niche_net_res[["CD31_PanCK"]][["ligandTarget"]] + 
  scale_fill_gradientn(colours = c("#e1e3e6", "#BEC100"))

save_plot(filename = "figures/ligand_receptor/fig6/CD31_PanCK_aupr.pdf", 
          plot = CD31_PanCK_aupr, base_height = 3,base_width = 2, bg="white")
save_plot(filename = "figures/ligand_receptor/fig6/CD31_PanCK_target.pdf", 
          plot = CD31_PanCK_target, base_height = 3.4,base_width = 5, bg="white")


# Endothelial immune
CD31_CD45_aupr <- niche_net_res[["CD31_CD45"]][["ligandPearson"]] + scale_fill_gradientn(colours = c("#D6DAE1", "firebrick3"))

CD31_CD45_target <- niche_net_res[["CD31_CD45"]][["ligandTarget"]] + 
  scale_fill_gradientn(colours = c("#e1e3e6", "#0F5A94"))

save_plot(filename = "figures/ligand_receptor/fig6/CD31_CD45_aupr.pdf", 
          plot = CD31_CD45_aupr, base_height = 3,base_width = 2, bg="white")
save_plot(filename = "figures/ligand_receptor/fig6/CD31_CD45_target.pdf", 
          plot = CD31_CD45_target, base_height = 3.4,base_width = 5, bg="white")


# Immune stroma
CD45_Stroma_aupr <- niche_net_res[["CD45_Stroma"]][["ligandPearson"]] + scale_fill_gradientn(colours = c("#D6DAE1", "firebrick3"))

CD45_Stroma_target <- niche_net_res[["CD45_Stroma"]][["ligandTarget"]] + 
  scale_fill_gradientn(colours = c("#e1e3e6", "#b52658"))

save_plot(filename = "figures/ligand_receptor/fig6/CD45_Stroma_aupr.pdf", 
          plot = CD45_Stroma_aupr, base_height = 3,base_width = 2, bg="white")
save_plot(filename = "figures/ligand_receptor/fig6/CD45_Stroma_target.pdf", 
          plot = CD45_Stroma_target, base_height = 3.4,base_width = 6.5, bg="white")


# Myo PanCK
Myo_PanCK_aupr <- niche_net_res[["Myo_PanCK"]][["ligandPearson"]] + scale_fill_gradientn(colours = c("#D6DAE1", "firebrick3"))

Myo_PanCK_target <- niche_net_res[["Myo_PanCK"]][["ligandTarget"]] + 
  scale_fill_gradientn(colours = c("#e1e3e6", "#BEC100"))

save_plot(filename = "figures/ligand_receptor/fig6/Myo_PanCK_aupr.pdf", 
          plot = Myo_PanCK_aupr, base_height = 3,base_width = 2, bg="white")
save_plot(filename = "figures/ligand_receptor/fig6/Myo_PanCK_target.pdf", 
          plot = Myo_PanCK_target, base_height = 3.4,base_width = 12.5, bg="white")


```



::: {.callout-note collapse="true"}
## Session Info

```{r}
sessionInfo()
```
:::
